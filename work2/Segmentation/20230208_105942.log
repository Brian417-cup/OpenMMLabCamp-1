2023-02-08 10:59:42,906 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 | packaged by conda-forge | (default, Feb  1 2023, 16:01:55) [GCC 11.3.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: /data/apps/CUDA/11.3.1
NVCC: Cuda compilation tools, release 11.3, V11.3.109
GCC: gcc (GCC) 7.3.0
PyTorch: 1.11.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0+cu113
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMDetection: 2.28.1+c14dd6c
------------------------------------------------------------

2023-02-08 10:59:43,836 - mmdet - INFO - Distributed training: False
2023-02-08 10:59:44,754 - mmdet - INFO - Config:
model = dict(
    type='MaskRCNN',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        style='caffe',
        init_cfg=dict(
            type='Pretrained',
            checkpoint='open-mmlab://detectron2/resnet50_caffe')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=1,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=1,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CocoDataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True,
        poly2mask=False),
    dict(
        type='Resize',
        img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),
                   (1333, 768), (1333, 800)],
        multiscale_mode='value',
        keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file=
        '/data/home/scv9609/run/mmdetection/data/balloon/train/annotation_coco_train.json',
        img_prefix='/data/home/scv9609/run/mmdetection/data/balloon/train/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True,
                poly2mask=False),
            dict(
                type='Resize',
                img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),
                           (1333, 768), (1333, 800)],
                multiscale_mode='value',
                keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ],
        classes=('balloon', )),
    val=dict(
        type='CocoDataset',
        ann_file=
        '/data/home/scv9609/run/mmdetection/data/balloon/val/annotation_coco_train.json',
        img_prefix='/data/home/scv9609/run/mmdetection/data/balloon/val/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[103.53, 116.28, 123.675],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('balloon', )),
    test=dict(
        type='CocoDataset',
        ann_file=
        '/data/home/scv9609/run/mmdetection/data/balloon/val/annotation_coco_train.json',
        img_prefix='/data/home/scv9609/run/mmdetection/data/balloon/val/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[103.53, 116.28, 123.675],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('balloon', )))
evaluation = dict(metric=['bbox', 'segm'], interval=12)
optimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup=None,
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=24)
checkpoint_config = dict(interval=12)
log_config = dict(
    interval=10,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/data/home/scv9609/run/mmdetection/checkpoints/mask_rcnn_r50_caffe_fpn_mstrain-poly_2x_coco_bbox_mAP-0.403__segm_mAP-0.365_20200504_231822-a75c98ce.pth'
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
auto_scale_lr = dict(enable=False, base_batch_size=16)
classes = ('balloon', )
work_dir = 'work/mask_rcnn'
auto_resume = False
gpu_ids = [0]

2023-02-08 10:59:44,758 - mmdet - INFO - Set random seed to 595551316, deterministic: False
2023-02-08 10:59:45,143 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://detectron2/resnet50_caffe'}
2023-02-08 10:59:45,387 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-02-08 10:59:45,408 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-02-08 10:59:45,413 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.mask_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.upsample.weight - torch.Size([256, 256, 2, 2]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.upsample.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  
2023-02-08 10:59:52,796 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-02-08 10:59:52,815 - mmdet - INFO - load checkpoint from local path: /data/home/scv9609/run/mmdetection/checkpoints/mask_rcnn_r50_caffe_fpn_mstrain-poly_2x_coco_bbox_mAP-0.403__segm_mAP-0.365_20200504_231822-a75c98ce.pth
2023-02-08 10:59:53,210 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([2, 1024]).
size mismatch for roi_head.bbox_head.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.fc_reg.weight: copying a param with shape torch.Size([320, 1024]) from checkpoint, the shape in current model is torch.Size([4, 1024]).
size mismatch for roi_head.bbox_head.fc_reg.bias: copying a param with shape torch.Size([320]) from checkpoint, the shape in current model is torch.Size([4]).
size mismatch for roi_head.mask_head.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for roi_head.mask_head.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([1]).
2023-02-08 10:59:53,215 - mmdet - INFO - Start running, host: scv9609@g0036, work_dir: /data/run01/scv9609/mmdetection/work/mask_rcnn
2023-02-08 10:59:53,215 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2023-02-08 10:59:53,216 - mmdet - INFO - workflow: [('train', 1)], max: 24 epochs
2023-02-08 10:59:53,216 - mmdet - INFO - Checkpoints will be saved to /data/run01/scv9609/mmdetection/work/mask_rcnn by HardDiskBackend.
2023-02-08 10:59:59,055 - mmdet - INFO - Epoch [1][10/31]	lr: 2.500e-03, eta: 0:05:53, time: 0.482, data_time: 0.238, memory: 3514, loss_rpn_cls: 0.0433, loss_rpn_bbox: 0.0121, loss_cls: 0.3556, acc: 87.1387, loss_bbox: 0.3408, loss_mask: 0.3165, loss: 1.0684
2023-02-08 11:00:01,078 - mmdet - INFO - Epoch [1][20/31]	lr: 2.500e-03, eta: 0:04:07, time: 0.203, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0252, loss_rpn_bbox: 0.0194, loss_cls: 0.1899, acc: 90.9473, loss_bbox: 0.3662, loss_mask: 0.1904, loss: 0.7910
2023-02-08 11:00:02,939 - mmdet - INFO - Epoch [1][30/31]	lr: 2.500e-03, eta: 0:03:27, time: 0.188, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0154, loss_rpn_bbox: 0.0113, loss_cls: 0.0802, acc: 97.2656, loss_bbox: 0.2228, loss_mask: 0.1243, loss: 0.4541
2023-02-08 11:00:07,341 - mmdet - INFO - Epoch [2][10/31]	lr: 2.500e-03, eta: 0:03:40, time: 0.413, data_time: 0.229, memory: 3514, loss_rpn_cls: 0.0090, loss_rpn_bbox: 0.0181, loss_cls: 0.0866, acc: 96.6602, loss_bbox: 0.1250, loss_mask: 0.1070, loss: 0.3458
2023-02-08 11:00:09,310 - mmdet - INFO - Epoch [2][20/31]	lr: 2.500e-03, eta: 0:03:21, time: 0.198, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0171, loss_rpn_bbox: 0.0138, loss_cls: 0.0662, acc: 97.3633, loss_bbox: 0.1081, loss_mask: 0.1540, loss: 0.3592
2023-02-08 11:00:11,391 - mmdet - INFO - Epoch [2][30/31]	lr: 2.500e-03, eta: 0:03:09, time: 0.209, data_time: 0.014, memory: 3514, loss_rpn_cls: 0.0105, loss_rpn_bbox: 0.0142, loss_cls: 0.0780, acc: 96.9141, loss_bbox: 0.1198, loss_mask: 0.1060, loss: 0.3285
2023-02-08 11:00:15,820 - mmdet - INFO - Epoch [3][10/31]	lr: 2.500e-03, eta: 0:03:16, time: 0.417, data_time: 0.226, memory: 3514, loss_rpn_cls: 0.0096, loss_rpn_bbox: 0.0133, loss_cls: 0.0728, acc: 97.0605, loss_bbox: 0.1162, loss_mask: 0.1179, loss: 0.3297
2023-02-08 11:00:17,756 - mmdet - INFO - Epoch [3][20/31]	lr: 2.500e-03, eta: 0:03:05, time: 0.193, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0052, loss_rpn_bbox: 0.0064, loss_cls: 0.0513, acc: 97.9590, loss_bbox: 0.0765, loss_mask: 0.0734, loss: 0.2128
2023-02-08 11:00:19,623 - mmdet - INFO - Epoch [3][30/31]	lr: 2.500e-03, eta: 0:02:56, time: 0.189, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0077, loss_rpn_bbox: 0.0112, loss_cls: 0.0667, acc: 97.4316, loss_bbox: 0.1011, loss_mask: 0.0730, loss: 0.2597
2023-02-08 11:00:24,054 - mmdet - INFO - Epoch [4][10/31]	lr: 2.500e-03, eta: 0:03:00, time: 0.414, data_time: 0.227, memory: 3514, loss_rpn_cls: 0.0065, loss_rpn_bbox: 0.0160, loss_cls: 0.0677, acc: 97.4707, loss_bbox: 0.0936, loss_mask: 0.1117, loss: 0.2955
2023-02-08 11:00:26,038 - mmdet - INFO - Epoch [4][20/31]	lr: 2.500e-03, eta: 0:02:53, time: 0.199, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0046, loss_rpn_bbox: 0.0114, loss_cls: 0.0622, acc: 97.4609, loss_bbox: 0.1051, loss_mask: 0.0758, loss: 0.2590
2023-02-08 11:00:27,861 - mmdet - INFO - Epoch [4][30/31]	lr: 2.500e-03, eta: 0:02:45, time: 0.184, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0021, loss_rpn_bbox: 0.0056, loss_cls: 0.0373, acc: 98.5449, loss_bbox: 0.0609, loss_mask: 0.0638, loss: 0.1698
2023-02-08 11:00:32,209 - mmdet - INFO - Epoch [5][10/31]	lr: 2.500e-03, eta: 0:02:48, time: 0.409, data_time: 0.228, memory: 3514, loss_rpn_cls: 0.0025, loss_rpn_bbox: 0.0107, loss_cls: 0.0556, acc: 97.9590, loss_bbox: 0.0967, loss_mask: 0.0868, loss: 0.2523
2023-02-08 11:00:34,136 - mmdet - INFO - Epoch [5][20/31]	lr: 2.500e-03, eta: 0:02:41, time: 0.191, data_time: 0.011, memory: 3514, loss_rpn_cls: 0.0041, loss_rpn_bbox: 0.0087, loss_cls: 0.0494, acc: 97.9297, loss_bbox: 0.0865, loss_mask: 0.0663, loss: 0.2150
2023-02-08 11:00:36,053 - mmdet - INFO - Epoch [5][30/31]	lr: 2.500e-03, eta: 0:02:36, time: 0.194, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0028, loss_rpn_bbox: 0.0096, loss_cls: 0.0618, acc: 97.7637, loss_bbox: 0.1050, loss_mask: 0.0755, loss: 0.2547
2023-02-08 11:00:40,370 - mmdet - INFO - Epoch [6][10/31]	lr: 2.500e-03, eta: 0:02:37, time: 0.405, data_time: 0.230, memory: 3514, loss_rpn_cls: 0.0020, loss_rpn_bbox: 0.0084, loss_cls: 0.0410, acc: 98.4766, loss_bbox: 0.0765, loss_mask: 0.0547, loss: 0.1826
2023-02-08 11:00:42,402 - mmdet - INFO - Epoch [6][20/31]	lr: 2.500e-03, eta: 0:02:32, time: 0.203, data_time: 0.014, memory: 3514, loss_rpn_cls: 0.0017, loss_rpn_bbox: 0.0107, loss_cls: 0.0545, acc: 98.0078, loss_bbox: 0.0903, loss_mask: 0.0616, loss: 0.2188
2023-02-08 11:00:44,316 - mmdet - INFO - Epoch [6][30/31]	lr: 2.500e-03, eta: 0:02:27, time: 0.193, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0019, loss_rpn_bbox: 0.0093, loss_cls: 0.0423, acc: 98.3594, loss_bbox: 0.0733, loss_mask: 0.0681, loss: 0.1949
2023-02-08 11:00:48,621 - mmdet - INFO - Epoch [7][10/31]	lr: 2.500e-03, eta: 0:02:27, time: 0.402, data_time: 0.228, memory: 3514, loss_rpn_cls: 0.0023, loss_rpn_bbox: 0.0054, loss_cls: 0.0338, acc: 98.7012, loss_bbox: 0.0543, loss_mask: 0.0546, loss: 0.1505
2023-02-08 11:00:50,629 - mmdet - INFO - Epoch [7][20/31]	lr: 2.500e-03, eta: 0:02:23, time: 0.201, data_time: 0.014, memory: 3514, loss_rpn_cls: 0.0046, loss_rpn_bbox: 0.0100, loss_cls: 0.0496, acc: 98.1152, loss_bbox: 0.0925, loss_mask: 0.0786, loss: 0.2353
2023-02-08 11:00:52,531 - mmdet - INFO - Epoch [7][30/31]	lr: 2.500e-03, eta: 0:02:18, time: 0.194, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0021, loss_rpn_bbox: 0.0097, loss_cls: 0.0461, acc: 98.1543, loss_bbox: 0.0774, loss_mask: 0.0644, loss: 0.1997
2023-02-08 11:00:56,887 - mmdet - INFO - Epoch [8][10/31]	lr: 2.500e-03, eta: 0:02:18, time: 0.406, data_time: 0.229, memory: 3514, loss_rpn_cls: 0.0024, loss_rpn_bbox: 0.0092, loss_cls: 0.0343, acc: 98.6816, loss_bbox: 0.0614, loss_mask: 0.0492, loss: 0.1566
2023-02-08 11:00:58,877 - mmdet - INFO - Epoch [8][20/31]	lr: 2.500e-03, eta: 0:02:14, time: 0.199, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0015, loss_rpn_bbox: 0.0063, loss_cls: 0.0432, acc: 98.3398, loss_bbox: 0.0769, loss_mask: 0.0755, loss: 0.2035
2023-02-08 11:01:00,785 - mmdet - INFO - Epoch [8][30/31]	lr: 2.500e-03, eta: 0:02:10, time: 0.193, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0012, loss_rpn_bbox: 0.0115, loss_cls: 0.0555, acc: 97.7148, loss_bbox: 0.0887, loss_mask: 0.0733, loss: 0.2303
2023-02-08 11:01:05,117 - mmdet - INFO - Epoch [9][10/31]	lr: 2.500e-04, eta: 0:02:09, time: 0.405, data_time: 0.230, memory: 3514, loss_rpn_cls: 0.0016, loss_rpn_bbox: 0.0048, loss_cls: 0.0365, acc: 98.5352, loss_bbox: 0.0597, loss_mask: 0.0507, loss: 0.1534
2023-02-08 11:01:07,136 - mmdet - INFO - Epoch [9][20/31]	lr: 2.500e-04, eta: 0:02:05, time: 0.202, data_time: 0.014, memory: 3514, loss_rpn_cls: 0.0026, loss_rpn_bbox: 0.0110, loss_cls: 0.0448, acc: 98.2422, loss_bbox: 0.0723, loss_mask: 0.0691, loss: 0.1997
2023-02-08 11:01:09,043 - mmdet - INFO - Epoch [9][30/31]	lr: 2.500e-04, eta: 0:02:01, time: 0.192, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0023, loss_rpn_bbox: 0.0061, loss_cls: 0.0314, acc: 98.9355, loss_bbox: 0.0530, loss_mask: 0.0533, loss: 0.1461
2023-02-08 11:01:13,457 - mmdet - INFO - Epoch [10][10/31]	lr: 2.500e-04, eta: 0:02:01, time: 0.413, data_time: 0.229, memory: 3514, loss_rpn_cls: 0.0026, loss_rpn_bbox: 0.0083, loss_cls: 0.0377, acc: 98.5742, loss_bbox: 0.0611, loss_mask: 0.0580, loss: 0.1677
2023-02-08 11:01:15,408 - mmdet - INFO - Epoch [10][20/31]	lr: 2.500e-04, eta: 0:01:57, time: 0.194, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0017, loss_rpn_bbox: 0.0033, loss_cls: 0.0259, acc: 99.0234, loss_bbox: 0.0406, loss_mask: 0.0472, loss: 0.1188
2023-02-08 11:01:17,423 - mmdet - INFO - Epoch [10][30/31]	lr: 2.500e-04, eta: 0:01:53, time: 0.203, data_time: 0.015, memory: 3514, loss_rpn_cls: 0.0014, loss_rpn_bbox: 0.0073, loss_cls: 0.0413, acc: 98.4961, loss_bbox: 0.0636, loss_mask: 0.0696, loss: 0.1832
2023-02-08 11:01:21,761 - mmdet - INFO - Epoch [11][10/31]	lr: 2.500e-04, eta: 0:01:52, time: 0.404, data_time: 0.224, memory: 3514, loss_rpn_cls: 0.0010, loss_rpn_bbox: 0.0064, loss_cls: 0.0360, acc: 98.7207, loss_bbox: 0.0548, loss_mask: 0.0562, loss: 0.1545
2023-02-08 11:01:23,731 - mmdet - INFO - Epoch [11][20/31]	lr: 2.500e-04, eta: 0:01:49, time: 0.197, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0012, loss_rpn_bbox: 0.0074, loss_cls: 0.0422, acc: 98.4375, loss_bbox: 0.0674, loss_mask: 0.0750, loss: 0.1932
2023-02-08 11:01:25,614 - mmdet - INFO - Epoch [11][30/31]	lr: 2.500e-04, eta: 0:01:45, time: 0.190, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0013, loss_rpn_bbox: 0.0050, loss_cls: 0.0285, acc: 98.9062, loss_bbox: 0.0395, loss_mask: 0.0452, loss: 0.1195
2023-02-08 11:01:29,900 - mmdet - INFO - Epoch [12][10/31]	lr: 2.500e-05, eta: 0:01:43, time: 0.402, data_time: 0.226, memory: 3514, loss_rpn_cls: 0.0011, loss_rpn_bbox: 0.0068, loss_cls: 0.0390, acc: 98.4668, loss_bbox: 0.0513, loss_mask: 0.0538, loss: 0.1520
2023-02-08 11:01:31,827 - mmdet - INFO - Epoch [12][20/31]	lr: 2.500e-05, eta: 0:01:40, time: 0.193, data_time: 0.014, memory: 3514, loss_rpn_cls: 0.0026, loss_rpn_bbox: 0.0042, loss_cls: 0.0242, acc: 99.1797, loss_bbox: 0.0403, loss_mask: 0.0523, loss: 0.1236
2023-02-08 11:01:33,828 - mmdet - INFO - Epoch [12][30/31]	lr: 2.500e-05, eta: 0:01:37, time: 0.201, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0027, loss_rpn_bbox: 0.0102, loss_cls: 0.0449, acc: 98.2715, loss_bbox: 0.0694, loss_mask: 0.0705, loss: 0.1976
2023-02-08 11:01:34,054 - mmdet - INFO - Saving checkpoint at 12 epochs
2023-02-08 11:01:36,691 - mmdet - INFO - Evaluating bbox...
2023-02-08 11:01:36,715 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.785
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.883
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.863
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.668
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.853
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.814
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.758
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.878

2023-02-08 11:01:36,715 - mmdet - INFO - Evaluating segm...
2023-02-08 11:01:36,743 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.805
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.883
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.855
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.688
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.871
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.832
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.832
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.832
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.889

2023-02-08 11:01:36,744 - mmdet - INFO - Exp name: mask_rcnn.py
2023-02-08 11:01:36,744 - mmdet - INFO - Epoch(val) [12][13]	bbox_mAP: 0.7854, bbox_mAP_50: 0.8831, bbox_mAP_75: 0.8633, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.6678, bbox_mAP_l: 0.8526, bbox_mAP_copypaste: 0.7854 0.8831 0.8633 0.0000 0.6678 0.8526, segm_mAP: 0.8052, segm_mAP_50: 0.8831, segm_mAP_75: 0.8548, segm_mAP_s: 0.0000, segm_mAP_m: 0.6876, segm_mAP_l: 0.8710, segm_mAP_copypaste: 0.8052 0.8831 0.8548 0.0000 0.6876 0.8710
2023-02-08 11:01:40,841 - mmdet - INFO - Epoch [13][10/31]	lr: 2.500e-05, eta: 0:01:35, time: 0.402, data_time: 0.225, memory: 3514, loss_rpn_cls: 0.0013, loss_rpn_bbox: 0.0045, loss_cls: 0.0314, acc: 99.0527, loss_bbox: 0.0419, loss_mask: 0.0473, loss: 0.1264
2023-02-08 11:01:42,912 - mmdet - INFO - Epoch [13][20/31]	lr: 2.500e-05, eta: 0:01:32, time: 0.207, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0033, loss_rpn_bbox: 0.0088, loss_cls: 0.0416, acc: 98.3789, loss_bbox: 0.0641, loss_mask: 0.0564, loss: 0.1742
2023-02-08 11:01:44,820 - mmdet - INFO - Epoch [13][30/31]	lr: 2.500e-05, eta: 0:01:29, time: 0.193, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0013, loss_rpn_bbox: 0.0063, loss_cls: 0.0368, acc: 98.7500, loss_bbox: 0.0551, loss_mask: 0.0574, loss: 0.1569
2023-02-08 11:01:49,068 - mmdet - INFO - Epoch [14][10/31]	lr: 2.500e-05, eta: 0:01:27, time: 0.397, data_time: 0.226, memory: 3514, loss_rpn_cls: 0.0019, loss_rpn_bbox: 0.0076, loss_cls: 0.0288, acc: 98.9355, loss_bbox: 0.0432, loss_mask: 0.0514, loss: 0.1329
2023-02-08 11:01:51,074 - mmdet - INFO - Epoch [14][20/31]	lr: 2.500e-05, eta: 0:01:24, time: 0.201, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0015, loss_rpn_bbox: 0.0079, loss_cls: 0.0365, acc: 98.6523, loss_bbox: 0.0573, loss_mask: 0.0572, loss: 0.1604
2023-02-08 11:01:53,004 - mmdet - INFO - Epoch [14][30/31]	lr: 2.500e-05, eta: 0:01:20, time: 0.195, data_time: 0.012, memory: 3514, loss_rpn_cls: 0.0023, loss_rpn_bbox: 0.0060, loss_cls: 0.0412, acc: 98.3398, loss_bbox: 0.0622, loss_mask: 0.0609, loss: 0.1726
2023-02-08 11:01:57,447 - mmdet - INFO - Epoch [15][10/31]	lr: 2.500e-05, eta: 0:01:18, time: 0.414, data_time: 0.230, memory: 3514, loss_rpn_cls: 0.0025, loss_rpn_bbox: 0.0076, loss_cls: 0.0365, acc: 98.7207, loss_bbox: 0.0539, loss_mask: 0.0642, loss: 0.1648
2023-02-08 11:01:59,382 - mmdet - INFO - Epoch [15][20/31]	lr: 2.500e-05, eta: 0:01:15, time: 0.194, data_time: 0.014, memory: 3514, loss_rpn_cls: 0.0009, loss_rpn_bbox: 0.0037, loss_cls: 0.0291, acc: 98.7988, loss_bbox: 0.0429, loss_mask: 0.0441, loss: 0.1206
2023-02-08 11:02:01,327 - mmdet - INFO - Epoch [15][30/31]	lr: 2.500e-05, eta: 0:01:12, time: 0.196, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0021, loss_rpn_bbox: 0.0057, loss_cls: 0.0374, acc: 98.5156, loss_bbox: 0.0575, loss_mask: 0.0687, loss: 0.1713
2023-02-08 11:02:05,837 - mmdet - INFO - Epoch [16][10/31]	lr: 2.500e-05, eta: 0:01:10, time: 0.421, data_time: 0.238, memory: 3514, loss_rpn_cls: 0.0015, loss_rpn_bbox: 0.0096, loss_cls: 0.0412, acc: 98.4082, loss_bbox: 0.0574, loss_mask: 0.0611, loss: 0.1707
2023-02-08 11:02:07,831 - mmdet - INFO - Epoch [16][20/31]	lr: 2.500e-05, eta: 0:01:07, time: 0.199, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0010, loss_rpn_bbox: 0.0047, loss_cls: 0.0327, acc: 98.7402, loss_bbox: 0.0523, loss_mask: 0.0636, loss: 0.1543
2023-02-08 11:02:09,686 - mmdet - INFO - Epoch [16][30/31]	lr: 2.500e-05, eta: 0:01:04, time: 0.187, data_time: 0.013, memory: 3514, loss_rpn_cls: 0.0015, loss_rpn_bbox: 0.0060, loss_cls: 0.0308, acc: 98.8672, loss_bbox: 0.0474, loss_mask: 0.0637, loss: 0.1494
2023-02-08 11:02:14,154 - mmdet - INFO - Epoch [17][10/31]	lr: 2.500e-05, eta: 0:01:02, time: 0.417, data_time: 0.232, memory: 3514, loss_rpn_cls: 0.0011, loss_rpn_bbox: 0.0051, loss_cls: 0.0337, acc: 98.7012, loss_bbox: 0.0505, loss_mask: 0.0570, loss: 0.1473
2023-02-08 11:02:16,230 - mmdet - INFO - Epoch [17][20/31]	lr: 2.500e-05, eta: 0:00:59, time: 0.207, data_time: 0.013, memory: 3565, loss_rpn_cls: 0.0030, loss_rpn_bbox: 0.0093, loss_cls: 0.0460, acc: 98.2520, loss_bbox: 0.0609, loss_mask: 0.0560, loss: 0.1752
2023-02-08 11:02:18,121 - mmdet - INFO - Epoch [17][30/31]	lr: 2.500e-05, eta: 0:00:56, time: 0.191, data_time: 0.014, memory: 3565, loss_rpn_cls: 0.0015, loss_rpn_bbox: 0.0055, loss_cls: 0.0349, acc: 98.7500, loss_bbox: 0.0549, loss_mask: 0.0557, loss: 0.1525
2023-02-08 11:02:22,516 - mmdet - INFO - Epoch [18][10/31]	lr: 2.500e-05, eta: 0:00:54, time: 0.412, data_time: 0.229, memory: 3565, loss_rpn_cls: 0.0034, loss_rpn_bbox: 0.0099, loss_cls: 0.0490, acc: 98.1738, loss_bbox: 0.0722, loss_mask: 0.0765, loss: 0.2109
2023-02-08 11:02:24,516 - mmdet - INFO - Epoch [18][20/31]	lr: 2.500e-05, eta: 0:00:51, time: 0.200, data_time: 0.014, memory: 3565, loss_rpn_cls: 0.0014, loss_rpn_bbox: 0.0064, loss_cls: 0.0322, acc: 98.8281, loss_bbox: 0.0546, loss_mask: 0.0588, loss: 0.1534
2023-02-08 11:02:26,401 - mmdet - INFO - Epoch [18][30/31]	lr: 2.500e-05, eta: 0:00:48, time: 0.191, data_time: 0.013, memory: 3565, loss_rpn_cls: 0.0009, loss_rpn_bbox: 0.0042, loss_cls: 0.0278, acc: 99.0625, loss_bbox: 0.0461, loss_mask: 0.0468, loss: 0.1259
2023-02-08 11:02:30,744 - mmdet - INFO - Epoch [19][10/31]	lr: 2.500e-05, eta: 0:00:46, time: 0.406, data_time: 0.227, memory: 3644, loss_rpn_cls: 0.0020, loss_rpn_bbox: 0.0041, loss_cls: 0.0315, acc: 98.8379, loss_bbox: 0.0499, loss_mask: 0.0562, loss: 0.1438
2023-02-08 11:02:32,807 - mmdet - INFO - Epoch [19][20/31]	lr: 2.500e-05, eta: 0:00:43, time: 0.206, data_time: 0.014, memory: 3644, loss_rpn_cls: 0.0019, loss_rpn_bbox: 0.0095, loss_cls: 0.0404, acc: 98.5352, loss_bbox: 0.0634, loss_mask: 0.0718, loss: 0.1870
2023-02-08 11:02:34,689 - mmdet - INFO - Epoch [19][30/31]	lr: 2.500e-05, eta: 0:00:40, time: 0.190, data_time: 0.013, memory: 3644, loss_rpn_cls: 0.0019, loss_rpn_bbox: 0.0041, loss_cls: 0.0274, acc: 98.9844, loss_bbox: 0.0408, loss_mask: 0.0440, loss: 0.1182
2023-02-08 11:02:39,055 - mmdet - INFO - Epoch [20][10/31]	lr: 2.500e-05, eta: 0:00:38, time: 0.407, data_time: 0.225, memory: 3644, loss_rpn_cls: 0.0011, loss_rpn_bbox: 0.0063, loss_cls: 0.0404, acc: 98.5059, loss_bbox: 0.0634, loss_mask: 0.0651, loss: 0.1762
2023-02-08 11:02:41,070 - mmdet - INFO - Epoch [20][20/31]	lr: 2.500e-05, eta: 0:00:35, time: 0.200, data_time: 0.012, memory: 3644, loss_rpn_cls: 0.0017, loss_rpn_bbox: 0.0069, loss_cls: 0.0394, acc: 98.5645, loss_bbox: 0.0591, loss_mask: 0.0681, loss: 0.1751
2023-02-08 11:02:42,928 - mmdet - INFO - Epoch [20][30/31]	lr: 2.500e-05, eta: 0:00:32, time: 0.188, data_time: 0.013, memory: 3644, loss_rpn_cls: 0.0007, loss_rpn_bbox: 0.0070, loss_cls: 0.0296, acc: 98.9160, loss_bbox: 0.0474, loss_mask: 0.0464, loss: 0.1310
2023-02-08 11:02:47,266 - mmdet - INFO - Epoch [21][10/31]	lr: 2.500e-05, eta: 0:00:29, time: 0.407, data_time: 0.232, memory: 3644, loss_rpn_cls: 0.0009, loss_rpn_bbox: 0.0054, loss_cls: 0.0311, acc: 98.9062, loss_bbox: 0.0527, loss_mask: 0.0629, loss: 0.1530
2023-02-08 11:02:49,266 - mmdet - INFO - Epoch [21][20/31]	lr: 2.500e-05, eta: 0:00:27, time: 0.200, data_time: 0.014, memory: 3644, loss_rpn_cls: 0.0013, loss_rpn_bbox: 0.0089, loss_cls: 0.0386, acc: 98.5156, loss_bbox: 0.0567, loss_mask: 0.0577, loss: 0.1632
2023-02-08 11:02:51,182 - mmdet - INFO - Epoch [21][30/31]	lr: 2.500e-05, eta: 0:00:24, time: 0.194, data_time: 0.014, memory: 3644, loss_rpn_cls: 0.0018, loss_rpn_bbox: 0.0052, loss_cls: 0.0424, acc: 98.4570, loss_bbox: 0.0569, loss_mask: 0.0527, loss: 0.1590
2023-02-08 11:02:55,526 - mmdet - INFO - Epoch [22][10/31]	lr: 2.500e-05, eta: 0:00:21, time: 0.407, data_time: 0.225, memory: 3644, loss_rpn_cls: 0.0006, loss_rpn_bbox: 0.0057, loss_cls: 0.0346, acc: 98.6816, loss_bbox: 0.0511, loss_mask: 0.0581, loss: 0.1501
2023-02-08 11:02:57,500 - mmdet - INFO - Epoch [22][20/31]	lr: 2.500e-05, eta: 0:00:19, time: 0.198, data_time: 0.014, memory: 3644, loss_rpn_cls: 0.0006, loss_rpn_bbox: 0.0043, loss_cls: 0.0276, acc: 98.9062, loss_bbox: 0.0401, loss_mask: 0.0546, loss: 0.1272
2023-02-08 11:02:59,435 - mmdet - INFO - Epoch [22][30/31]	lr: 2.500e-05, eta: 0:00:16, time: 0.196, data_time: 0.014, memory: 3644, loss_rpn_cls: 0.0030, loss_rpn_bbox: 0.0119, loss_cls: 0.0460, acc: 98.2715, loss_bbox: 0.0697, loss_mask: 0.0713, loss: 0.2020
2023-02-08 11:03:03,794 - mmdet - INFO - Epoch [23][10/31]	lr: 2.500e-05, eta: 0:00:13, time: 0.410, data_time: 0.228, memory: 3644, loss_rpn_cls: 0.0016, loss_rpn_bbox: 0.0086, loss_cls: 0.0417, acc: 98.5840, loss_bbox: 0.0632, loss_mask: 0.0598, loss: 0.1748
2023-02-08 11:03:05,788 - mmdet - INFO - Epoch [23][20/31]	lr: 2.500e-05, eta: 0:00:10, time: 0.200, data_time: 0.013, memory: 3644, loss_rpn_cls: 0.0006, loss_rpn_bbox: 0.0058, loss_cls: 0.0328, acc: 98.7793, loss_bbox: 0.0544, loss_mask: 0.0586, loss: 0.1523
2023-02-08 11:03:07,638 - mmdet - INFO - Epoch [23][30/31]	lr: 2.500e-05, eta: 0:00:08, time: 0.187, data_time: 0.012, memory: 3644, loss_rpn_cls: 0.0012, loss_rpn_bbox: 0.0057, loss_cls: 0.0269, acc: 99.0625, loss_bbox: 0.0413, loss_mask: 0.0551, loss: 0.1302
2023-02-08 11:03:12,119 - mmdet - INFO - Epoch [24][10/31]	lr: 2.500e-05, eta: 0:00:05, time: 0.421, data_time: 0.237, memory: 3644, loss_rpn_cls: 0.0026, loss_rpn_bbox: 0.0078, loss_cls: 0.0361, acc: 98.6621, loss_bbox: 0.0567, loss_mask: 0.0595, loss: 0.1626
2023-02-08 11:03:14,080 - mmdet - INFO - Epoch [24][20/31]	lr: 2.500e-05, eta: 0:00:02, time: 0.196, data_time: 0.013, memory: 3644, loss_rpn_cls: 0.0020, loss_rpn_bbox: 0.0065, loss_cls: 0.0394, acc: 98.6133, loss_bbox: 0.0505, loss_mask: 0.0498, loss: 0.1482
2023-02-08 11:03:15,998 - mmdet - INFO - Epoch [24][30/31]	lr: 2.500e-05, eta: 0:00:00, time: 0.194, data_time: 0.013, memory: 3644, loss_rpn_cls: 0.0010, loss_rpn_bbox: 0.0048, loss_cls: 0.0331, acc: 98.7207, loss_bbox: 0.0498, loss_mask: 0.0671, loss: 0.1558
2023-02-08 11:03:16,186 - mmdet - INFO - Saving checkpoint at 24 epochs
2023-02-08 11:03:21,280 - mmdet - INFO - Evaluating bbox...
2023-02-08 11:03:21,302 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.793
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.883
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.863
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.663
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.863
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.818
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.818
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.818
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.750
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.886

2023-02-08 11:03:21,302 - mmdet - INFO - Evaluating segm...
2023-02-08 11:03:21,327 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.806
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.883
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.855
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.682
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.871
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.832
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.832
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.832
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.800
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.889

2023-02-08 11:03:21,327 - mmdet - INFO - Exp name: mask_rcnn.py
2023-02-08 11:03:21,328 - mmdet - INFO - Epoch(val) [24][13]	bbox_mAP: 0.7931, bbox_mAP_50: 0.8826, bbox_mAP_75: 0.8633, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.6633, bbox_mAP_l: 0.8631, bbox_mAP_copypaste: 0.7931 0.8826 0.8633 0.0000 0.6633 0.8631, segm_mAP: 0.8056, segm_mAP_50: 0.8826, segm_mAP_75: 0.8546, segm_mAP_s: 0.0000, segm_mAP_m: 0.6822, segm_mAP_l: 0.8712, segm_mAP_copypaste: 0.8056 0.8826 0.8546 0.0000 0.6822 0.8712
